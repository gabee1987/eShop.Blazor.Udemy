@inject IDeleteProductUseCase deleteProductUseCase 
@inject IUpdateQuantityUseCase updateQuantityUseCase 

@if( LineItem != null && LineItem.Product != null )
{
    <li class="row">
        <div class="col">
            <img src="@LineItem.Product.ImageLink" />
        </div>
        <div class="col">
            <h5>@LineItem.Product.Name</h5>
            <div>
                <span>Quantity:&nbsp;&nbsp;</span>
                <input type="number" min="0" value="@LineItem.Quantity" @onchange="HandleQuantityChange" />
            </div>
            <div>
                <span>Price&nbsp;&nbsp;@LineItem.Product.Price.ToString("c")</span>
            </div>
            <div class="col">
                <button class="btn btn-light" @onclick="@( () => DeleteProduct( LineItem.ProductId ) )">Delete</button>
            </div>
        </div>
    </li>
}

@code {

    [Parameter]
    public OrderLineItem LineItem { get; set; }

    [Parameter]
    public EventCallback<Order> OnDeleteProduct { get; set; }

    [Parameter]
    public EventCallback<Order> OnUpdateQuantity { get; set; }

    async void HandleQuantityChange( ChangeEventArgs e )
    {
        if ( e.Value == null || string.IsNullOrWhiteSpace( e.Value.ToString() ) )
            return;

        int quantity = 0;
        if ( int.TryParse( e.Value.ToString(), out quantity ) )
        {
            if ( quantity < 0 )
                return;

            var order = await updateQuantityUseCase.Execute( LineItem.ProductId, quantity );
            await OnUpdateQuantity.InvokeAsync( order );
        }

    }

    async void DeleteProduct( int productId )
    {
        var order = await deleteProductUseCase.Execute( productId );
        await OnDeleteProduct.InvokeAsync( order );
    }
}
