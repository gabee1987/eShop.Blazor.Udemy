@page "/placeorder"

@inject NavigationManager navigationManager

@inject IViewShoppingCartUseCase viewShoppingCartUseCase
@inject IPlaceOrderUseCase placeOrderUseCase

<h3>Placing Order</h3>
<br />

@if ( order != null )
{
<div class="container">
    <div class="row placeorder-container">
        <div class="col">
            <CustomerFormComponent OnCustomerInfoSubmitted="HandleCustomerInfoSubmitted"></CustomerFormComponent>
        </div>
        <div class="col">
            <OrderSummaryComponent Order="order" HidePlaceOrder="true"></OrderSummaryComponent>
        </div>
    </div>
</div>
    
}

@code {

    private Order order;

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if ( firstRender )
        {
            order = await viewShoppingCartUseCase.Execute();
            StateHasChanged();
        }
    }

    private async void HandleCustomerInfoSubmitted( CustomerViewModel customer )
    {
        var mapper = new AutoMapper.MapperConfiguration( cfg => cfg.CreateMap<CustomerViewModel, Order>() ).CreateMapper();

        mapper.Map<CustomerViewModel, Order>( customer, order );

        var orderUniqueId = await placeOrderUseCase.Execute( order );
        if ( string.IsNullOrEmpty( orderUniqueId ) )
        {
            var errorMessage = "Cannot find customer!";

            navigationManager.NavigateTo( $"/error" );
        }
        else
        {
            navigationManager.NavigateTo( $"/orderconfirm/{orderUniqueId}" );
        }
    }
}
