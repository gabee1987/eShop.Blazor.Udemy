@page "/cart"

@inject IViewShoppingCartUseCase viewShoppingCartUseCase

<div class="container">
    <h3>Shopping Cart</h3>
    <br />

    @if ( m_order != null && m_order.LineItems != null && m_order.LineItems.Count > 0 )
    {
        <div class="row">
            <div class="col-6">
                <ul>
                    @for ( int i = 0; i < m_order.LineItems.Count; i++ )
                    {
                        // line items
                        <LineItemComponent LineItem="m_order.LineItems[i]" OnDeleteProduct="HandleDeleteProduct" OnUpdateQuantity="HandleUpdateQuantity"></LineItemComponent>
                        @if ( i < m_order.LineItems.Count - 1 )
                        {
                            <li style="list-style: none">
                                <hr />
                            </li>
                        }
                    }
                </ul>
            </div>
            <div class="col">
                <OrderSummaryComponent Order="m_order"></OrderSummaryComponent>
            </div>
        </div>
    }
</div>



@code {

    private Order m_order;

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if ( firstRender )
        {
            m_order = await viewShoppingCartUseCase.Execute();
            StateHasChanged();
        }
    }

    private void HandleDeleteProduct( Order order )
    {
        this.m_order = order;
    }

    private void HandleUpdateQuantity( Order order )
    {
        this.m_order = order;
    }
}
